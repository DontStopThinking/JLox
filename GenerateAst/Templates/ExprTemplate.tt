<#@ template language="C#" #>
<#
    if (ContainerClassName is null)
    {
        throw new InvalidOperationException($"{nameof(ContainerClassName)} is not initialized.");
    }

    if (RuleModels is null)
    {
        throw new InvalidOperationException($"{nameof(RuleModels)} is not initialized.");
    }
#>
using JLox.Scanning;

namespace JLox.SyntaxTrees;

internal abstract class <#= ContainerClassName #>
{
    internal interface Visitor<R>
    {
<#
    foreach (RuleModel ruleModel in RuleModels)
    {
#>
        R Visit<#= ruleModel.ClassName #><#= ContainerClassName #>(<#= ruleModel.ClassName #> <#= ContainerClassName.ToLower() #>);
<#
    }
#>
    }

    internal abstract R Accept<R>(Visitor<R> visitor);

    // The AST classes
<#
    for (int i = 0; i < RuleModels.Count; i++)
    {
        RuleModel ruleModel = RuleModels[i];
#>
    internal class <#= ruleModel.ClassName #> : <#= ContainerClassName #>
    {
<#
        foreach ((string memberType, string memberName) in ruleModel.MemberTypeToNames)
        {
#>
        private readonly <#= memberType #> _<#= memberName #>;
<#
        }
#>

        public <#= ruleModel.ClassName #>(<#= ruleModel.ConstructorArguments #>)
        {
<#
        foreach (string memberName in ruleModel.MemberNames)
        {
#>
            _<#= memberName #> = <#= memberName #>;
<#
        }
#>
        }

        internal override R Accept<R>(Visitor<R> visitor)
        {
            return visitor.Visit<#= ruleModel.ClassName #><#= ContainerClassName #>(this);
        }
    }
<#
        if (i != RuleModels.Count - 1)
        {
            Write(Environment.NewLine);
        }
    }
#>
}
<#+
#nullable enable
    public string? ContainerClassName { get; init; }
    public IReadOnlyList<RuleModel>? RuleModels { get; init; }
#nullable disable
#>
